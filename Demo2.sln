#include "raylib.h"
#include <math.h>
#include "rlgl.h"
#include "raymath.h"
#include <stdlib.h>

// Structs
typedef struct Player1 {
    Vector2 position;
    float speed;
    bool canJump;
    bool canDuck;
} Player1;

typedef struct Inimigo1 {
    Vector2 position;
    float speed;
    float raio;
    Color cor;
    bool ativo;
    float tempoParaRespawn;
} Inimigo1;

typedef struct Player2 {
    Vector2 position;
    float speed;
    bool canJump;
} Player2;

Inimigo1 inimigos[50];

// Inicialização dos inimigos
void InicializarInimigos() {
    for (int i = 0; i < 50; i++) {
        inimigos[i].ativo = false;
        inimigos[i].tempoParaRespawn = GetRandomValue(1, 3);
    }
}

// Respawn individual
void RespawnInimigo(int i) {
    inimigos[i].position = Vector2{ 800.0f, 391 };
    inimigos[i].speed = GetRandomValue(100, 200) / 100.0f;
    inimigos[i].raio = 20;
    inimigos[i].cor = RED;
    inimigos[i].ativo = true;
}

// Atualização dos inimigos
void AtualizarInimigos(float delta) {
    for (int i = 0; i < 50; i++) {
        if (inimigos[i].ativo) {
            inimigos[i].position.x -= inimigos[i].speed;

            if (inimigos[i].position.x + inimigos[i].raio < 0) {
                inimigos[i].ativo = false;
                inimigos[i].tempoParaRespawn = 2.0f;
            }
        }
        else {
            inimigos[i].tempoParaRespawn -= delta;
            if (inimigos[i].tempoParaRespawn <= 0) {
                RespawnInimigo(i);
            }
        }
    }
}

// Desenho dos inimigos
void DesenharInimigos() {
    for (int i = 0; i < 50; i++) {
        if (inimigos[i].ativo) {
            DrawCircleV(inimigos[i].position, inimigos[i].raio, inimigos[i].cor);
            break; // remove esse break se quiser todos os inimigos aparecendo
        }
    }
}

// Main
int main(void) {
    const int screenWidth = 1600;
    const int screenHeight = 850;

    InitWindow(screenWidth, screenHeight, "raylib - player com pulo");

    // Inicializa player
    Player1 player = { 0 };
    player.position = Vector2{ 23, 415 };
    player.speed = 4;
    player.canJump = true;
    player.canDuck = true;

    // Variáveis de física
    float gravity = 0.5f;
    float jumpForce = -10.0f;
    float velocityY = 0;
    float groundY = 415.0f;  // altura do chão (base do player)

    InicializarInimigos();

    SetTargetFPS(60);

    while (!WindowShouldClose()) {
        float delta = GetFrameTime();
        bool isDucking = false;

        AtualizarInimigos(delta);

        if (IsKeyDown(KEY_DOWN) && player.canDuck) {
            isDucking = true;
        }
        else {
            isDucking = false;
        }

        // Gravidade
        velocityY += gravity;

        // Pulo com seta para cima
        if (IsKeyPressed(KEY_UP) && player.canJump) {
            velocityY = jumpForce;
            player.canJump = false;
        }

        // Aplica movimento vertical
        player.position.y += velocityY;

        // Verifica chão
        if (player.position.y >= groundY) {
            player.position.y = groundY;
            velocityY = 0;
            player.canJump = true;
            player.canDuck = true;
        }

        // Desenho
        BeginDrawing();
        ClearBackground(RAYWHITE);

        DesenharInimigos();

        DrawLine(0, screenHeight / 2, screenWidth, screenHeight / 2, DARKGRAY);
        // Desenha player como retângulo
        float currentHeight;
        if (isDucking == true) {
            currentHeight = 20;
        }
        else {
            currentHeight = 40;
        }

        Rectangle playerRect = { player.position.x - 20, player.position.y - currentHeight, 40.0f, currentHeight };
        DrawRectangleRec(playerRect, RED);

        // Desenha posição do mouse
        Vector2 mousePos = GetMousePosition();
        DrawCircleV(mousePos, 5, RED);
        DrawText(TextFormat("Mouse: [%.0f, %.0f]", mousePos.x, mousePos.y), 10, 10, 20, DARKGRAY);

        EndDrawing();
    }

    CloseWindow();
    return 0;
}
